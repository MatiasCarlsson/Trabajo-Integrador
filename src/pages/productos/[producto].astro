---
import type { GetStaticPaths } from 'astro';
import productos from '@data/productos.json';
import Layout from '@layouts/Layout.astro';

export const getStaticPaths: GetStaticPaths = async () => {
  return productos.map((producto) => ({
    params: {
      producto: producto.nombre
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-'),
    },
    props: { producto },
  }));
};

interface Producto {
  nombre: string;
  precio: number;
  imagen: string;
  descripcion: string;
}

export interface Props {
  producto: Producto;
}

const { producto } = Astro.props;
const precioFormato = new Intl.NumberFormat('es-ES', {
  style: 'currency',
  currency: 'ARS',
}).format(producto.precio);

// Helper para crear URLs con base path
function createURL(path: string) {
  const base = import.meta.env.BASE_URL || '/';
  const cleanPath = path.replace(/^\//, '');
  return base.endsWith('/') ? base + cleanPath : base + '/' + cleanPath;
}
---

<Layout title={`Detalles de ${producto.nombre}`}>
  <article
    class="container mx-auto my-8 grid grid-cols-1 gap-6 px-4 md:grid-cols-2 md:gap-8"
  >
    <div class="order-2 md:order-1">
      <img
        src={producto.imagen}
        alt={producto.nombre}
        class="w-full rounded-lg object-contain md:object-cover"
      />
    </div>
    <div class="order-1 md:order-2">
      <h1 class="mb-4 text-2xl font-bold md:text-3xl">{producto.nombre}</h1>
      <p class="mb-4 text-sm text-gray-700 md:text-base">
        {producto.descripcion}
      </p>
      <p class="mb-6 text-xl font-bold md:text-2xl">Precio: {precioFormato}</p>
      <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
        <button
          type="button"
          class="rounded-lg bg-purple-600 px-4 py-2 text-sm text-white hover:bg-purple-700 focus:ring-2 focus:ring-purple-400 md:px-6 md:text-base"
          id="add-to-cart"
          data-id={producto.nombre
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, '-')}
          data-nombre={producto.nombre}
          data-precio={producto.precio}
          data-imagen={producto.imagen}
        >
          A√±adir al carrito
        </button>
        <a
          href={createURL('/productos')}
          class="text-center text-sm text-purple-600 underline md:text-base"
        >
          Volver a la tienda
        </a>
      </div>
    </div>
  </article>
</Layout>

<script>
  declare global {
    interface Window {
      updateCartCount: () => void;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('add-to-cart') as HTMLButtonElement;

    if (!button) {
      console.error('No se encontr√≥ el bot√≥n del carrito');
      return;
    }

    button.addEventListener('click', () => {
      const producto = {
        id: button.dataset.id!,
        nombre: button.dataset.nombre!,
        precio: Number(button.dataset.precio!),
        imagen: button.dataset.imagen!,
      };

      const carrito = JSON.parse(localStorage.getItem('carrito') || '[]');
      const existente = carrito.find((item: any) => item.id === producto.id);

      if (existente) {
        existente.cantidad = (existente.cantidad || 1) + 1;
        console.log(
          `‚úÖ ${existente.nombre}: ahora tienes ${existente.cantidad} unidades`
        );
      } else {
        carrito.push({ ...producto, cantidad: 1 });
        console.log(`üÜï ${producto.nombre}: agregado con 1 unidad`);
      }

      localStorage.setItem('carrito', JSON.stringify(carrito));

      if (typeof window.updateCartCount === 'function') {
        window.updateCartCount();
      } else {
        console.error('‚ùå window.updateCartCount no existe');
      }

      alert(`${producto.nombre} ha sido a√±adido al carrito`);
    });
  });
</script>
